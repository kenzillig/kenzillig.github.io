select(LAT,LONG)
library(tidyverse)
str(salmap.dat)
test.geo <- salmap.dat %>%
select(LAT,LONG)
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG)
?SpatialPoints()
SpatialPoints(test.geo)
salmap.dat <- read_csv("kenzillig.github.io/SalMap/SalMapTest1.csv")
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG)
SpatialPoints(test.geo)
install.packages("leaflet")
library(flexdashboard)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE)
knitr::opts_knit$set(root.dir = normalizePath("../"))
library(sf)
library(raster)
library(leaflet)
library(tidyverse)
library(rgdal)
## This script will be where I practice making maps.
rm(list=ls())
library(sf)
library(raster)
library(leaflet)
library(tidyverse)
library(rgdal)
## read in the salmap dataset
salmap.dat <- read_csv("kenzillig.github.io/SalMap/SalMapTest1.csv")
## read in the salmap dataset
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=-38.635384, popup="The birthplace of R")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=38.635384, popup="The birthplace of R")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=38.635384, popup="Nimbus Hatchery") %>%
addMarkers(lng=-122.425908, lat = 40.7159, popup = "Coleman Hatchery")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=38.635384, popup="Nimbus Hatchery") %>%
addMarkers(lng=-122.425908, lat = 40.7159, popup = "Coleman Hatchery") %>%
addMarkers(lng=-122.1415, lat=40.39814)
)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=38.635384, popup="Nimbus Hatchery") %>%
addMarkers(lng=-122.425908, lat = 40.7159, popup = "Coleman Hatchery") %>%
addMarkers(lng=-122.1415, lat=40.39814, popup = "Livingston Stone")
)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=38.635384, popup="Nimbus Hatchery") %>%
addMarkers(lng=-122.425908, lat = 40.7159, popup = "Coleman Hatchery") %>%
addMarkers(lng=-122.1415, lat=40.39814, popup = "Livingston Stone")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.226426, lat=38.635384, popup="Nimbus Hatchery") %>%
addMarkers(lng=-122.425908, lat = 40.7159, popup = "Livingston Stone Hatchery") %>%
addMarkers(lng=-122.1415, lat=40.39814, popup = "Coleman Hatchery")
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-121.2264, lat=38.6353, popup="Nimbus Hatchery") %>%
addMarkers(lng=-122.4259, lat = 40.7159, popup = "Livingston Stone Hatchery") %>%
addMarkers(lng=-122.1415, lat=40.3981, popup = "Coleman Hatchery")
m
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,LOCATION)
## read in the salmap dataset
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,Location)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=test.geo$Location)
m
install.packages("shiny")
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
"Hello World"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
"Hello World"
sliderInput(inputId = "num",
label = "CHoose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "CHoose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### SHiny App Template
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",   ## input ID is the name for the input, which can be referred to as later
label = "CHoose a number", ## this labels the input so the user knows what to do
value = 25, min = 1, max = 100), #Then there are arguments for each input, these are specific to each input
## Other ones I want to use, buttons, checkbox groups, select box, radio buttons, there are lots
#Outputs
#can place, table,s image plots, txt, UI elements,
plotOutput(outputId = "HIST",
)
)
server <- function(input, output, session) {  ## this assembles the inputs and outputs
# 3 rules for server function
#1 - saving an output object 'output$hist <- code
#2 - outputs need to use a render function, renders include plots, tables, text, UI
#3 - Use the input values to create outputs, they are referenced bytheir nname input$num references the one above
output$HIST <- renderPlot({ ## within the {} is a code block that will produce the plot or other output
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
### SHiny App Template
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",   ## input ID is the name for the input, which can be referred to as later
label = "CHoose a number", ## this labels the input so the user knows what to do
value = 25, min = 1, max = 1000), #Then there are arguments for each input, these are specific to each input
## Other ones I want to use, buttons, checkbox groups, select box, radio buttons, there are lots
#Outputs
#can place, table,s image plots, txt, UI elements,
plotOutput(outputId = "HIST",
)
)
server <- function(input, output, session) {  ## this assembles the inputs and outputs
# 3 rules for server function
#1 - saving an output object 'output$hist <- code
#2 - outputs need to use a render function, renders include plots, tables, text, UI
#3 - Use the input values to create outputs, they are referenced bytheir nname input$num references the one above
output$HIST <- renderPlot({ ## within the {} is a code block that will produce the plot or other output
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
runApp('shiny_app_foundation.r')
runApp('shiny_app_foundation.r')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kenzillig', token='3E63416725FF3E0C445D6F61B17B11B5', secret='NjW8ympIYpJTbt8zMG+xnRLNkx4qywNWNvwi572J')
library(rsconnect)
rsconnect::deployApp('path/to/your/app'
)
library(shiny); runApp('SalMap_demo.r')
?switch()
?sink()
## This script will be where I practice making maps.
rm(list=ls())
library(sf)
library(raster)
library(leaflet)
library(tidyverse)
library(rgdal)
## read in the salmap dataset
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,Location)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=test.geo$Location)
m
salmap.dat <- read_csv("/SalMap/SalMapTest1.csv")
getwd()
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
salmap.dat <- read_csv("SalMap/SalMapTest1.csv") # read in the dataset.
# Tab1: get stations ## first panel
datasetInput <- reactive({
switch(input$species,
salmap.dat.1 <- dplyr::filter(salmap.dat, SPECIES==input$species))
})
library(shiny)
# Tab1: get stations ## first panel
datasetInput <- reactive({
switch(input$species,
salmap.dat.1 <- dplyr::filter(salmap.dat, SPECIES==input$species))
})
switch(input$species,
salmap.dat.1 <- dplyr::filter(salmap.dat, SPECIES==input$species))
p1 <- ggplot() +
geom_linerange(data=salmap.dat, aes(x=PUBLICATION_YEAR, ymin=input$date_range[1], ymax=input$date_range[2]), color="gray50", alpha=0.6) +
#geom_linerange(data=datasetInput(), aes(x=Station, ymin=minDate, ymax=maxDate), color="orange", lwd=1.5) + ## this highlights the selected value in the plot
coord_flip() #+
p1
function (file, local = FALSE, echo = verbose, print.eval = echo,
exprs, spaced = use_file, verbose = getOption("verbose"),
prompt.echo = getOption("prompt"), max.deparse.length = 150,
width.cutoff = 60L, deparseCtrl = "showAttributes", chdir = FALSE,
encoding = getOption("encoding"), continue.echo = getOption("continue"),
skip.echo = 0, keep.source = getOption("keep.source"))
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
p1 <- ggplot() +
geom_linerange(data=salmap.dat, aes(x=PUBLICATION_YEAR, ymin=input$date_range[1], ymax=input$date_range[2]), color="gray50", alpha=0.6) +
#geom_linerange(data=datasetInput(), aes(x=Station, ymin=minDate, ymax=maxDate), color="orange", lwd=1.5) + ## this highlights the selected value in the plot
coord_flip() #+
p1
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
species_list <- salmap.dat$SPECIES
species_list
runApp('SalMap_demo.r')
install.packages("shinyBS")
library(shinyBS)
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
install.packages("shinythemes")
library(shinythemes)
runApp('SalMap_demo.r')
runApp('SalMap_demo.r')
### iny App for the SalMap project.
library(shiny)
library(shinyBS)
library(shinythemes)
library(leaflet)
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
species_list <- salmap.dat$SPECIES
## User Interface ----
shinyUI(navbarPage(theme=shinytheme("yeti"),
title=HTML('<div><a href="http://kenzillig.github.io" target="_blank">'),
tabPanel("SalMap",value="salMap"),
tabPanel("Data View", value="datView"),
#tabPanel("About", value="about"),
windowTitle="SalMap",
collapsible=TRUE,
id="tab",
tags$head(tags$link(rel="stylesheet", type="text/css", href="styles.css")),
# First panel, SalMap
conditionalPanel("input.tab=='salMap'",
fluidRow(
column(4, h2("SalMap"), h3("Data with Destinations")),  # title, subtitle
column(8, h3("Salmonid Publications"), # Title over second colum
fluidRow(
column(4,
checkboxGroupInput("species", label = "species",  # selection box
selected = NULL, # starts with nothing selected
choices = c("All", species_list), ## passes it a vector of options
width="100%") # doesnt allow multiple selections
)
))
),
#bsTooltip is a window that provides informaiton when the user hovers over the object
bsTooltip(id = "station", title = "Select a species", placement = "top", options = list(container="body")),
fluidRow(
column(4, leafletOutput("map")),  ## this puts the map on the right hand side
column(8, plotOutput("plotRange")) ## this places the other plot on the left hand side
)
),
# Second Panel, Data View
conditionalPanel("input.tab=='datView'",
fluidRow(
column(4, h2(HTML("<a href='http://www.dfg.ca.gov/delta/projects.asp?ProjectID=ZOOPLANKTON' target=_blank>Zoop IEP Data</a>")), ## this links to another website
h3("Explore IEP CB Variables")), ## this is the subtitle
column(8,
fluidRow(
column(6,
checkboxGroupInput("variables",
label = "Select Species of Interest",
selected = NULL, # starts with nothing selected
choices = c("All", species_list), ## passes it a vector of options
width="100%")
),
column(2,
sliderInput("date_range", label = 'Publication Year', ### change this input method to user input date
min = 1900, max = 2020, value = c(1900,2020))
)
#   column(2,
#          selectInput('end_date', label= 'End Date',
#                      choices=c(None=".", Year="Year", Survey="Survey"))
#   )
# )#,
# fluidRow(
#   column(4,
#          selectInput("yr_range", label = "Year Range",
#                      choices = c(seq(1972,2017,1)),
#                      selected = 1978, multiple = TRUE)
#   ),
#   column(4,
#          selectInput("mon_range", label = "Month Range",
#                      choices = c(seq(1,12,1)), selected = 3,
#                      multiple = TRUE)
#   )
# )
)
),
bsTooltip("variables", "Select a salmonid species", "top", options = list(container="body")),
#bsTooltip("logscale", "Check this box to log scale the data.", "top", options = list(container="body")),
bsTooltip("date_range", "Select range for publications", "top", options = list(container="body")),
#bsTooltip("end_date", "Select the months of interest.", "top", options = list(container="body")),
fluidRow(
#column(4, plotOutput("map2")),  ## will plot a map on the left
#column(8, plotOutput("plotData")) ### will plot the graphs on the right
)
),)))
## Third Panel About
#conditionalPanel("input.tab=='about'", source("about.R",local=T)$value))))  ## need to make an about.R file which contians the information to be dispalyed on this page
#dynamic_server ----
shinyServer(function(input, output, session) {
salmap.dat <- read_csv("SalMap/SalMapTest1.csv") # read in the dataset.
# Tab1: get stations ## first panel
salmap.dat.1 <- reactive({
switch(input$species,
salmap.dat.t <- dplyr::filter(salmap.dat, SPECIES==input$species))
})
# for Tab1 Reactive Map  ## first panel
observeEvent(input$species, {  ### takes in the information from the selection of station
x <- input$species
if(!is.null(x) && x!=""){  ## i think this is just an error code? I am not sure
sink("siteLog.txt", append=TRUE, split=FALSE)
cat(paste0(x, "\n"))
sink()
}
})
# Make Leaflet Map    Firsth panel###
output$map <- renderLeaflet({
leaflet() %>%
setView(-121.75, lat=38.07, zoom = 9) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group = "OpenBW") %>%
addProviderTiles("Esri.WorldGrayCanvas", group="ESRI Canvas") %>%
# add scale bar
addMeasure(position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# add markers
addCircleMarkers(data=salmap.dat.1, group="SPECIES",
layerId = ~SPECIES,
radius = 8, color = "white", fillColor = "purple",
weight= 1, fillOpacity=0.7,
popup = paste0("Species: ", salmap.dat.1$SPECIES,  ## these provide the pop information on each point on the map
"<br> Lon: ", salmap.dat.1$LONG,
"<br> Lat: ", salmap.dat.1$LAT,
"<br> Type: ", salmap.dat.1$LOCATION)) %>%
addLayersControl(
baseGroups = c("ESRI Canvas", "OpenBW",
"Topo","ESRI Aerial"),
overlayGroups = c("Species"),
options = layersControlOptions(collapsed = T))
})
# # create a click event for Map
# observeEvent(input$map_marker_click, {  ## this code allows someone to click on the map and have it respond with the other graph.
#   p <- input$map_marker_click
#   if(p$id=="Selected"){
#     leafletProxy("map") %>% removeMarker(layerId="Selected")
#   } else {
#     leafletProxy("map") %>% setView(lng=p$lng, lat=p$lat, input$map_zoom) %>% addCircleMarkers(p$lng, p$lat, radius=10, color="black", fillColor="orange", fillOpacity=1, opacity=1, stroke=TRUE, layerId="Selected")
#   }
# })
#
# # make a second event to update future clicks depending on if something has been changed or selected in the se
# observeEvent(input$map_marker_click, {
#   p <- input$map_marker_click
#   if(!is.null(p$id)){
#     if(is.null(input$station)) updateSelectInput(session, "station", selected=p$id)
#     if(!is.null(input$station) && input$station!=p$id) updateSelectInput(session, "station", selected=p$id)
#   }
# })
#
# observeEvent(input$station, {
#   p <- input$map_marker_click
#   p2 <- subset(cb_filt_stations, Station==input$station)
#   if(nrow(p2)==0){
#     leafletProxy("map") %>% removeMarker(layerId="Selected")
#   } else if(is.null(p$id) || input$station!=p$id){
#     leafletProxy("map") %>% setView(lng=p2$lon, lat=p2$lat, input$map_zoom) %>% addCircleMarkers(p2$lon, p2$lat, radius=10, color="black", fillColor="orange", fillOpacity=1, opacity=1, stroke=TRUE, layerId="Selected")
#   }
# })
# Tab1: plot date range of available data for station
output$plotRange <- renderPlot({  ## Makes the graph for the right hand side of the slide.
p1 <- ggplot() +
geom_linerange(data=salmap.dat, aes(x=PUBLICATION_YEAR, ymin=input$date_range[1], ymax=input$date_range[2]), color="gray50", alpha=0.6) +
#geom_linerange(data=datasetInput(), aes(x=Station, ymin=minDate, ymax=maxDate), color="orange", lwd=1.5) + ## this highlights the selected value in the plot
coord_flip() #+
#scale_y_date(date_breaks = "10 years",date_labels = "%Y",
# limits = c(as.Date("1972-01-10", "%Y-%m-%d"),
#            as.Date("2018-01-01", "%Y-%m-%d")))
print(p1)
})
# Tab2: Select columns
# df_sel <- reactive({ ### this filters the dataset to be to the users specifications
#   switch(input$variables,
#          salmap.dat %>% select(PUBLICATION_YEAR, LOCATION, LAT, LONG, SPECIES, CITATION) #%>% ## input$variables is the species that was selected
#            #dplyr::filter(PUBL %in% input$yr_range, Survey %in% input$mon_range, input$variables>0) %>% ## this filters teh data by the input variable, the given data range,
#            #mutate(Year = as.factor(Year), Survey=as.factor(Survey))
#   )
# })
# output$plotData <- renderPlot({  ## this plots the data based upon the dataset that the user defined above.
#   plot2 <- ggplot(df_sel(), aes_string(x="Survey", y=input$variables, fill="Year")) +
#     geom_boxplot(position=position_dodge(width=1))
#   scale_fill_viridis_d()
#
#   if (input$logscale) ## this adjusts the plot to be log scale
#     plot2 <- plot2 + scale_y_log10()
#
#   facets <- paste(input$facet_row, '~', input$facet_col)
#   if (facets != '. ~ .')
#     plot2 <- plot2 + facet_grid(facets, scales = "free")
#
#   print(plot2)
#
# })
# output$map2 <- renderPlot({
#   ggplot() + geom_sf(data=df_sel(), pch=21, fill="orange") +
#     theme_light()
# })
})
shinyApp()
?shinyApp()
?shinyApp(ui, server)
shinyApp(ui, server)
rm(list=ls())
library(sf)
library(raster)
library(leaflet)
library(tidyverse)
library(rgdal)
## read in the salmap dataset
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,Location)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " Citation Num: ",count(salmon.dat$LOCATION))
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " Citation Num: ",count(salmon.dat$LOCATION)))
m
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,Location)
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,LOCATION)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " Citation Num: ",count(salmon.dat$LOCATION)))
## read in the salmap dataset
salmap.dat <- read_csv("SalMap/SalMapTest1.csv")
test.geo <- salmap.dat %>%
dplyr::select(LAT,LONG,LOCATION)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " Citation Num: ",count(salmon.dat$LOCATION)))
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " Citation Num: ",count(test.geo$LOCATION)))
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " Citation Num: 2"))
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=test.geo$LONG, lat=test.geo$LAT, popup=paste0(test.geo$LOCATION, " | Citation Num: 2"))
m
install.packages(c("devtools","mvtnorm","loo","coda"),dependencies=TRUE)
library(devtools)
devtools::install_github("stan-dev/cmdstanr")
devtools::install_github("stan-dev/cmdstanr")
install_cmdstan()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan")
install.packages(c("backports", "BH", "brms", "broom", "cli", "codetools", "colorspace", "cpp11", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "DT", "emmeans", "fansi", "foreign", "freetypeharfbuzz", "future", "gdtools", "generics", "GGally", "ggdist", "ggeffects", "ggplot2", "ggrepel", "ggridges", "gh", "git2r", "globals", "hms", "htmltools", "htmlwidgets", "httpuv", "hunspell", "inline", "insight", "isoband", "janitor", "jsonlite", "KernSmooth", "leaflet", "lme4", "loo", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sf", "sp", "StanHeaders", "testthat", "tibble", "tidybayes", "tinytex", "usethis", "V8", "vctrs", "withr", "xfun"))
install.packages(c("backports", "BH", "brms", "broom", "cli", "codetools", "colorspace", "cpp11", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "DT", "emmeans", "fansi", "foreign", "freetypeharfbuzz", "future", "gdtools", "generics", "GGally", "ggdist", "ggeffects", "ggplot2", "ggrepel", "ggridges", "gh", "git2r", "globals", "hms", "htmltools", "htmlwidgets", "httpuv", "hunspell", "inline", "insight", "isoband", "janitor", "jsonlite", "KernSmooth", "leaflet", "lme4", "loo", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sf", "sp", "StanHeaders", "testthat", "tibble", "tidybayes", "tinytex", "usethis", "V8", "vctrs", "withr", "xfun"))
install.packages(c("backports", "BH", "brms", "broom", "cli", "codetools", "colorspace", "cpp11", "crosstalk", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "DT", "emmeans", "fansi", "foreign", "freetypeharfbuzz", "future", "gdtools", "generics", "GGally", "ggdist", "ggeffects", "ggplot2", "ggrepel", "ggridges", "gh", "git2r", "globals", "hms", "htmltools", "htmlwidgets", "httpuv", "hunspell", "inline", "insight", "isoband", "janitor", "jsonlite", "KernSmooth", "leaflet", "lme4", "loo", "lubridate", "magrittr", "Matrix", "multcomp", "nlme", "openxlsx", "patchwork", "pbkrtest", "pillar", "pkgbuild", "processx", "ps", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "sf", "sp", "StanHeaders", "testthat", "tibble", "tidybayes", "tinytex", "usethis", "V8", "vctrs", "withr", "xfun"))
remove.packages("rstan")
git pull
